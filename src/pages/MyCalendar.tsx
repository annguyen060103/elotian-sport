import React, { useEffect, useState } from 'react';
import type { BadgeProps, CalendarProps } from 'antd';
import { Badge, Calendar, Modal } from 'antd';
import type { Dayjs } from 'dayjs';
import dayjs from 'dayjs';
import weekOfYear from 'dayjs/plugin/weekOfYear';

dayjs.extend(weekOfYear);
import { ClassSchedule } from '@/interfaces/ClassSchedule';
import { useClassSchedule } from '@/hooks/useClassSchedule';
import { useForm, Controller } from 'react-hook-form';
import styles from './MyCalendar.module.scss';
import { Text } from '@/components/Text';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/Button';
import { Input } from '@/components/Input';
import plus from '@/assets/icons/plus.svg';

const getListData = (value: Dayjs, schedules: ClassSchedule[]) => {
  const listData = schedules
    .filter((schedule) => {
      const startDate = dayjs(schedule.startTime);
      return startDate.isSame(value, 'day');
    })
    .map((schedule) => ({
      type: 'success',
      content: `${dayjs(schedule.startTime).format('HH:mm')} - ${dayjs(
        schedule.endTime,
      ).format('HH:mm')} (${schedule.classType})`,
    }));

  return listData || [];
};

export const MyCalendar = () => {
  const { schedules, getAll, createFixedSchedule } = useClassSchedule();
  const { t } = useTranslation();
  const [createModalVisible, setCreateModalVisible] = useState(false);

  const {
    formState: { errors },
    control,
    setValue,
    handleSubmit,
  } = useForm<Partial<ClassSchedule>>();

  useEffect(() => {
    // Fetch all schedules when the page loads
    getAll();
  }, []);

  const onSaveClass = async (classData: Partial<ClassSchedule>) => {
    try {
      const query = {
        classType: classData.classType || 'OFFLINE',
        shift: classData.shift || 'MORNING',
        weekMode: 'STANDARD', // Default value for weekMode
      };

      const body: ClassSchedule = {
        classScheduleId: '', // This will be generated by the backend
        branchId: classData.branchId || '',
        teacherId: classData.teacherId || '',
        facilityId: classData.facilityId || '',
        startTime: classData.startTime || '',
        endTime: classData.endTime || '',
        status: 'SCHEDULED',
        classType: classData.classType || 'OFFLINE',
        weekOfYear: dayjs(classData.startTime).week(),
        month: dayjs(classData.startTime).month() + 1,
        year: dayjs(classData.startTime).year(),
        shift: classData.shift || 'MORNING',
      };

      console.log('ðŸ’¥ query = ', query);
      console.log('ðŸ’¥ body = ', body);

      // Call the API to create the class
      await createFixedSchedule(query, body);
      alert('Class created successfully!');
      setCreateModalVisible(false);
      getAll(); // Refetch schedules
    } catch (err) {
      console.error('Failed to create class:', err);
      alert('Failed to create class. Please try again.');
    }
  };

  const dateCellRender = (value: Dayjs) => {
    const listData = getListData(value, schedules);
    return (
      <ul className="events">
        {listData.map((item, index) => (
          <li key={index}>
            <Badge
              status={item.type as BadgeProps['status']}
              text={item.content}
            />
          </li>
        ))}
      </ul>
    );
  };

  const cellRender: CalendarProps<Dayjs>['cellRender'] = (current, info) => {
    if (info.type === 'date') return dateCellRender(current);
    return info.originNode;
  };

  return (
    <div className={styles.container}>
      <div className={styles.topSection}>
        <span className={styles.title}>
          <Text type="Headline 1">{t('calendarManagement')}</Text>
        </span>
        <Button
          type="primary"
          title={t('addNew')}
          icon={<img src={plus} />}
          onClick={() => setCreateModalVisible(true)}
        />
      </div>
      <div className={styles.calendar}>
        <Calendar cellRender={cellRender} />
      </div>

      {createModalVisible && (
        <Modal
          closable={false}
          open={createModalVisible}
          footer={null}
          onCancel={() => setCreateModalVisible(false)}
        >
          <div className={styles.modal}>
            <Text type="Headline 1">{t('createNewClass')}</Text>
            <Controller
              control={control}
              rules={{ required: t('branchIdRequired') }}
              render={({ field: { onChange, onBlur, value } }) => (
                <Input
                  label={t('branchId')}
                  placeholder={t('branchIdPlaceholder')}
                  onClear={() => setValue('branchId', '')}
                  error={errors.branchId?.message}
                  onBlur={onBlur}
                  onChange={onChange}
                  value={value}
                />
              )}
              name="branchId"
            />
            <Controller
              control={control}
              rules={{ required: t('teacherIdRequired') }}
              render={({ field: { onChange, onBlur, value } }) => (
                <Input
                  label={t('teacherId')}
                  placeholder={t('teacherIdPlaceholder')}
                  onClear={() => setValue('teacherId', '')}
                  error={errors.teacherId?.message}
                  onBlur={onBlur}
                  onChange={onChange}
                  value={value}
                />
              )}
              name="teacherId"
            />
            <Controller
              control={control}
              rules={{ required: t('startTimeRequired') }}
              render={({ field: { onChange, onBlur, value } }) => (
                <Input
                  label={t('startTime')}
                  placeholder={t('startTimePlaceholder')}
                  type="datetime-local"
                  onClear={() => setValue('startTime', '')}
                  error={errors.startTime?.message}
                  onBlur={onBlur}
                  onChange={onChange}
                  value={value}
                />
              )}
              name="startTime"
            />
            <Controller
              control={control}
              rules={{ required: t('endTimeRequired') }}
              render={({ field: { onChange, onBlur, value } }) => (
                <Input
                  label={t('endTime')}
                  placeholder={t('endTimePlaceholder')}
                  type="datetime-local"
                  onClear={() => setValue('endTime', '')}
                  error={errors.endTime?.message}
                  onBlur={onBlur}
                  onChange={onChange}
                  value={value}
                />
              )}
              name="endTime"
            />
            {/* <Controller
              control={control}
              render={({ field: { onBlur } }) => (
                <select
                  className={styles.select}
                  onBlur={onBlur}
                  onChange={(e) =>
                    setValue(
                      'classType',
                      e.target.value as 'OFFLINE' | 'ONLINE',
                    )
                  }
                >
                  <option value="OFFLINE">{t('offline')}</option>
                  <option value="ONLINE">{t('online')}</option>
                </select>
              )}
              name="classType"
            /> */}
            <div className={styles.modalFooter}>
              <Button
                type="outline"
                title={t('cancel')}
                onClick={() => setCreateModalVisible(false)}
              />
              <Button
                title={t('save')}
                onClick={handleSubmit((data) => onSaveClass(data))}
              />
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};
